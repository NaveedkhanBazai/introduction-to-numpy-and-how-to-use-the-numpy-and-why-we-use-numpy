Introduction to NumPy:

NumPy, short for Numerical Python, is a powerful Python library for numerical computing. It provides support for large, multi-dimensional arrays and matrices, as well as a wide array of mathematical functions to operate on these arrays. NumPy is the fundamental package for scientific computing with Python and is widely used in data science, machine learning, image processing, and many other fields.

Why use NumPy:

NumPy offers several advantages over standard Python lists:

Efficient and Fast: NumPy arrays are implemented in C and allow for efficient operations on large datasets, making them significantly faster than standard Python lists.

Multi-dimensional Arrays: NumPy allows you to work with multi-dimensional arrays, which is essential for scientific and numerical computations.

Broadcasting: NumPy supports broadcasting, a powerful feature that allows you to perform operations on arrays of different shapes.

Mathematical Functions: NumPy provides a wide range of mathematical functions, including trigonometry, linear algebra, statistical operations, etc.

Integration with Other Libraries: NumPy is a foundation for many other Python libraries in the scientific computing ecosystem, like Pandas, SciPy, and scikit-learn, enhancing their capabilities.

How to use NumPy:

To use NumPy, you need to install it first. You can install NumPy using pip:
pip install numpy
Once NumPy is installed, you can import it into your Python code and start using its features:
import numpy as np

# Creating a NumPy array from a list
my_list = [1, 2, 3, 4, 5]
my_array = np.array(my_list)

print("NumPy Array:", my_array)
# Output: [1 2 3 4 5]

# Perform mathematical operations on NumPy arrays
squared_array = my_array ** 2
print("Squared Array:", squared_array)
# Output: [ 1  4  9 16 25]

# Calculate the mean of the elements in the array
mean_value = np.mean(my_array)
print("Mean:", mean_value)
# Output: 3.0

# Create a 2D NumPy array
my_matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print("2D NumPy Array:")
print(my_matrix)
# Output:
# [[1 2 3]
#  [4 5 6]
#  [7 8 9]]

# Perform operations on 2D arrays
row_sum = np.sum(my_matrix, axis=1)
print("Row Sum:", row_sum)
# Output: [ 6 15 24]

column_sum = np.sum(my_matrix, axis=0)
print("Column Sum:", column_sum)
# Output: [12 15 18]
